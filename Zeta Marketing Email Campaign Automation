/**
 * This function checks if an email address is valid.
 *
 * @param {string} email The email address to check.
 * @returns {boolean} Whether the email address is valid.
 */
function isValidEmail(email) {
  const regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;
  return regex.test(email);
}


function sendPrerace() {
    // Get the data range containing the email addresses to send the message to
    var myArray = sheet.getRange("B10:C20");

    // Generate a random ID for the message
    var randomid = Math.random().toString().slice(2, 11);

    // Get the event name, touch ID, membership status, race name, and email address from the sheet
    var event = sheet.getRange(1, 1).getValue();
    var touch = sheet.getRange(2, 3).getValue();
    var memStatus = sheet.getRange(2, 1).getValue();
    var race_name = sheet.getRange(1, 3).getValue();
    var newEmail = sheet.getRange(3, 3).getValue();

    // Initialize the email and message status variables
    var email = '';
    var mesStatus = '';

    // Determine the subject line based on the touch ID
    var subject = '';
    switch (touch) {
        case 1.0:
            subject = `Gear Up for Race Day in ${race_name}`;
            break;
        case 2.0:
            subject = `The secret to going TURBO on race day`;
            break;
        case 3.0:
            subject = `Build Your ${race_name} Team, Earn Cash Rebates!`;
            break;
        case 4.0:
            subject = `Ready for race day in ${race_name}?`;
            break;
        case 5.0:
            subject = `Your Official ${race_name} Spartan Checklist Reminder`;
            break;
        default:
            // Do nothing if touch ID is not defined
            break;
    }

    // If a new email has been provided
    if (newEmail) {
        // Check if the email is valid
        if (isValidEmail(newEmail)) {
            // Set a message to inform the user the email will be sent to the entered email address
            mesStatus = "Your message will be sent to the email address entered"
            email = newEmail;
        } else {
            // If the email is not valid, set a message to inform the user and use the invalid email
            mesStatus = "Please use a valid email";
            email = newEmail;
        }
    } else {
        // If no new email has been provided, use the email of the active user
        email = Session.getActiveUser().getEmail();
        var temail = "userEmail";
    }



    // Clear the range containing the message status and test email
    var unRange = sheet.getRange("C6:E6");
    unRange.clearContent();
    SpreadsheetApp.flush();

    // Set up the API authentication and payload
    var USERNAME = 'api';
    var PASSWORD = '[REMOVED]';
    var API_URL = '[REMOVED]';

    // Create the JSON payload for the POST request
    var data = {
        "activity": {
            "subscriber": {
                "uid": `${email}`
            },
            "event": "dipo_test_prerace",
            "timestamp": "",
            "properties": {
                "race_id": `${event}`,
                "touch_id": `${touch}`,
                "slid": `Test - ${randomid}`,
                "subject": `${subject}`,
                "friendly_event_name": `${race_name}`,
                "test_mem_status": `${memStatus}`
            }
        }
    };

    var authHeader = 'Basic ' + Utilities.base64Encode(USERNAME + ':' + PASSWORD);
    var options = {
        headers: {
            Authorization: authHeader,
            Accept: 'application/json'
        },
        'contentType': 'application/json',
        'method': 'post',
        'payload': JSON.stringify(data),
        muteHttpExceptions: true
    }

    if (temail == "userEmail") {
        // Include 'options' object in every request
        var response = UrlFetchApp.fetch(API_URL, options);
        sheet.getRange(6, 3).setValue(randomid);
        SpreadsheetApp.flush();
        addLog(getEmailLinkpre(randomid), randomid, race_name, memStatus, email, touch);
    } else {
        var response = UrlFetchApp.fetch(API_URL, options);
        sheet.getRange(6, 3).setValue(randomid);
        SpreadsheetApp.flush();
        sheet.getRange("D6").setValue(mesStatus);
        sheet.getRange(6, 3).setValue(randomid);
        SpreadsheetApp.flush();
    }
}


/**
 * Add a new row to the top of the log with the given values.
 * @param {string} randomid - The random ID.
 * @param {string} id - The ID.
 * @param {string} race - The race name.
 * @param {string} membership - The membership status.
 * @param {string} t - The touch.
 */
function addLog(randomid, id, race, membership, t) {
    var myArray = sheet.getRange("A10:B19").getValues(); // Get the values of the log.

    // Format the test ID based on the race, membership, and touch values.
    if (membership == "Paid") {
        membership = "Spartan+";
    } else {
        membership = "Spartan";
    }
    var testid = race + " " + membership + " touch " + t;

    // Add the new row to the top of the log.
    myArray.pop(); // Remove the last row of the log.
    myArray.unshift([randomid, testid]); // Add a new row at the top of the log.

    var range = sheet.getRange("A10:B19"); // Get the range of the log.
    range.setValues(myArray); // Update the log with the new row.
}


/**
 * Retrieves a link from an email and sets it in a cell of the current sheet
 *
 * @param {string} x - The search string for the subject of the email
 * @returns {string} The link found in the email
 * @throws {Error} If the email containing the link couldn't be found
 */
function getEmailLinkpre(x) {
    // Search for the email thread with the given subject
    var threads = "";
    for (var i = 0; i < 11; i++) {
        threads = GmailApp.search('subject:"' + x + '"');
        if (threads == "") {
            // If the email isn't found, wait 10 seconds and try again (up to 11 times)
            Utilities.sleep(10 * 1000);
            Logger.log("ran " + i + " times.");
        } else {
            break;
        }
    }

    try {
        // Get the message and link from the first email in the thread
        var message = threads[0].getMessages()[0].getPlainBody();
        var messageHTML = threads[0].getMessages()[0].getBody();
        var myRegexp = /(?:https:\/\/)(.*?)\/(.+?)\/(.+?)\/(.+?)\/(.+?)\/(.+?)($)/gm;
        var tmatch = message.match(myRegexp);
        Logger.log(tmatch[0]);

        // Create a rich text object containing the link and set it in a cell of the current sheet
        var richValue = SpreadsheetApp.newRichTextValue()
            .setText("Your Test Link")
            .setLinkUrl(tmatch[0])
            .build();
        sheet.getRange("D6").setRichTextValue(richValue);
        Logger.log("Found it!");

        // Show a popup with the message content
        showMessage(messageHTML);

        return tmatch[0];
    } catch (error) {
        // Throw an error if the email isn't found
        throw new Error("Couldn't find your email. Please wait a few minutes and check your inbox. If you still have trouble contact the emarketing team alias");
    }
}

/**
 * This function runs again the getEmailLinkpre function to retrieve and display the test link for a given test id.
 */
function runAgain() {
    var test_id = sheet.getRange(6, 3).getValue(); // Retrieve the test id from the spreadsheet
    getEmailLinkpre(test_id); // Retrieve and display the test link for the given test id
    SpreadsheetApp.flush(); // Flush the spreadsheet to ensure all changes are saved
}

/**
 * This function shows a modal dialog with the pre-race test message in HTML format.
 * 
 * @param {string} html - The HTML code for the pre-race test message.
 */
function showMessage(html) {
    // Create a modal dialog with the given HTML code
    var dialog = HtmlService.createHtmlOutput(html)
        .setWidth(660)
        .setHeight(800);

    // Show the modal dialog
    SpreadsheetApp.getUi().showModalDialog(dialog, 'PreRace Test message');
}
